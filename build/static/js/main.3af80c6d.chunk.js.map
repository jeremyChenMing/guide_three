{"version":3,"sources":["utils/history.js","component/scroolTop/ScrollToTop.js","component/loading/Loading.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","ScrollToTop","prevProps","this","props","location","pathname","window","scrollTo","children","Component","withRouter","Loading","isLoading","timedOut","_react_16_12_0_react_default","a","createElement","pastDelay","className","style","width","height","error","AsyncFloorOne","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","AsyncFloorTwo","AsyncFloorThree","App","errorInfo","console","log","config_provider","locale","zh_CN","Router","history","scroolTop_ScrollToTop","Switch","Route","path","component","Redirect","to","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MACeA,4ECETC,6LACcC,GACdC,KAAKC,MAAMC,SAASC,WAAaJ,EAAUG,SAASC,UACvDC,OAAOC,SAAS,EAAG,oCAIpB,OAAOL,KAAKC,MAAMK,gBAPMC,aAWXC,cAAWV,6DCZX,SAASW,EAAQR,GAC/B,OAAIA,EAAMS,UACLT,EAAMU,SACFC,EAAAC,EAAAC,cAAA,uCACGb,EAAMc,UAEfH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACdJ,EAAAC,EAAAC,cAAA,OACCE,UAAU,cACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAEhCP,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,eAMG,KAEEb,EAAMmB,MACTR,EAAAC,EAAAC,cAAA,uCAEA,eCZHO,EAAgBC,IAAS,CAC9BC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASrB,IAEJsB,EAAgBT,IAAS,CAC9BC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASrB,IAEJuB,EAAkBV,IAAS,CAChCC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASrB,IAEJwB,4LACab,EAAOc,GACxBC,QAAQC,IAAIhB,EAAOc,EAAW,mDAEtB,IACAhC,EAAaF,KAAKC,MAAlBC,SACR,OACCU,EAAAC,EAAAC,cAAAuB,EAAA,GAAgBC,OAAQC,KACvB3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACdJ,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,QAASA,GAChB7B,EAAAC,EAAAC,cAAC4B,EAAD,KASG9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQzC,SAAWA,GAIlBU,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,uBAAuBC,UAAWzB,IAC9CT,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,uBAAuBC,UAAWf,IAC9CnB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,yBAAyBC,UAAWd,IAChDpB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUC,GAAG,2CA1BLzC,aAsCHC,cAAWyB,GC7DNgB,QACW,cAA7B7C,OAAOF,SAASgD,UAEe,UAA7B9C,OAAOF,SAASgD,UAEhB9C,OAAOF,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OACPzC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,QAASA,GACf7B,EAAAC,EAAAC,cAACwC,EAAD,OACSC,SAASC,eAAe,UDwH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.3af80c6d.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.location.pathname !== prevProps.location.pathname) {\n\t\t\twindow.scrollTo(0, 0);\n\t\t}\n\t}\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\n\nexport default function Loading(props) {\n\tif (props.isLoading) {\n\t\tif (props.timedOut) {\n\t\t\treturn <div>加载超时</div>;\n\t\t} else if (props.pastDelay) {\n\t\t\treturn (\n\t\t\t\t<div className=\"loading-Box\">\n\t\t\t\t\t<div className=\"lds-css ng-scope\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"lds-spinner\"\n\t\t\t\t\t\t\tstyle={{ width: '100%', height: '100%' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} else if (props.error) {\n\t\treturn <div>加载出错</div>;\n\t} else {\n\t\treturn null;\n\t}\n}\n","import React, { Component } from 'react';\n\nimport ScrollToTop from './component/scroolTop/ScrollToTop';\n\nimport { Switch, Router, Route, Redirect, withRouter } from \"react-router-dom\";\n// import { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { ConfigProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\n\nimport Loadable from 'react-loadable';\nimport Loading from './component/loading/Loading';\n\nimport history from './utils/history';\n\nimport './static/css/reset.less';\n\n// const AsyncHome = Loadable({\n// \tloader: () => import('./pages/home/Home'),\n// \tloading: Loading\n// });\n// const AsyncLogin = Loadable({\n// \tloader: () => import('./pages/login/Login'),\n// \tloading: Loading\n// });\nconst AsyncFloorOne = Loadable({\n\tloader: () => import('./pages/FloorOne/FloorOne'),\n\tloading: Loading\n});\nconst AsyncFloorTwo = Loadable({\n\tloader: () => import('./pages/FloorTwo/FloorTwo'),\n\tloading: Loading\n});\nconst AsyncFloorThree = Loadable({\n\tloader: () => import('./pages/FloorThree/FloorThree'),\n\tloading: Loading\n});\nclass App extends Component {\n\tcomponentDidCatch(error, errorInfo) {\n\t\tconsole.log(error, errorInfo, 'react-err-eric');\n\t}\n\trender() {\n\t\tconst { location } = this.props;\n\t\treturn (\n\t\t\t<ConfigProvider locale={zh_CN}>\n\t\t\t\t<div className=\"main\">\n\t\t\t\t\t<Router history={history}>\n\t\t\t\t\t\t<ScrollToTop>\n\t\t\t\t\t\t\t{/*<TransitionGroup>*/}\n\t\t\t\t\t\t\t\t{/*<CSSTransition*/}\n\t\t\t\t\t\t\t\t\t{/*key={ location.pathname }*/}\n\t\t\t\t\t\t\t\t\t{/*timeout={ 3000 }*/}\n\t\t\t\t\t\t\t\t\t{/*classNames=\"chang\"*/}\n\t\t\t\t\t\t\t\t\t{/*in={ true }*/}\n\t\t\t\t\t\t\t\t\t{/*appear={true}*/}\n\t\t\t\t\t\t\t\t{/*>*/}\n\t\t\t\t\t\t\t\t\t<Switch location={ location }>\n\t\t\t\t\t\t\t\t\t\t{/*<Route path=\"/:id\" exact component={AsyncFloorOne} />*/}\n\t\t\t\t\t\t\t\t\t\t{/*<Route path=\"/login\" component={AsyncLogin} />*/}\n\t\t\t\t\t\t\t\t\t\t{/*<Route path=\"/home\" component={AsyncHome} />*/}\n\t\t\t\t\t\t\t\t\t\t<Route path=\"/floor-one/:position\" component={AsyncFloorOne} />\n\t\t\t\t\t\t\t\t\t\t<Route path=\"/floor-two/:position\" component={AsyncFloorTwo} />\n\t\t\t\t\t\t\t\t\t\t<Route path=\"/floor-three/:position\" component={AsyncFloorThree} />\n\t\t\t\t\t\t\t\t\t\t<Redirect to=\"/floor-one/1?floor-name=1F\"/>\n\t\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t\t{/*</CSSTransition>*/}\n\t\t\t\t\t\t\t{/*</TransitionGroup>*/}\n\t\t\t\t\t\t</ScrollToTop>\n\t\t\t\t\t</Router>\n\t\t\t\t</div>\n\t\t\t</ConfigProvider>\n\t\t);\n\t}\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\n/*eslint-disable*/\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport history from './utils/history';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>, document.getElementById('react'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}